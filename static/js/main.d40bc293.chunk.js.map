{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","todos","setTodoModal","isClicked","setIsClicked","setIsLoading","useState","selectedTodoId","setSelectedTodoId","extractUser","todo","a","userId","user","id","alert","className","map","index","completed","title","classNames","type","onClick","TodoFilter","searchInput","setSearchInput","setFilterMode","onChange","e","target","value","placeholder","length","style","pointerEvents","Loader","TodoModal","todoModal","isLoading","todoStatus","href","name","App","setTodos","email","phone","filteredTodos","setFilteredTodos","filterMode","fetchTodos","data","console","log","useEffect","filteredTodosArr","useMemo","filter","isSearched","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d40bc293.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import classNames from 'classnames';\nimport { Dispatch, SetStateAction, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { TodoModalType } from '../../types/TodoModal';\n\ninterface TodoListProps {\n  todos: Todo[];\n  setTodoModal: Dispatch<SetStateAction<TodoModalType>>;\n  isClicked: boolean;\n  setIsClicked: Dispatch<SetStateAction<boolean>>;\n  setIsLoading: Dispatch<SetStateAction<boolean>>;\n\n}\n\nexport const TodoList: React.FC<TodoListProps> = (\n  {\n    todos,\n    setTodoModal,\n    isClicked,\n    setIsClicked,\n    setIsLoading,\n  },\n) => {\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null >(null);\n\n  const extractUser = async (todo: Todo) => {\n    setIsClicked(true);\n    setIsLoading(true);\n    try {\n      const user = await getUser(todo.userId);\n\n      setTodoModal({\n        user,\n        todo,\n      });\n\n      setSelectedTodoId(todo.id);\n    } catch (error) {\n      // eslint-disable-next-line no-alert\n      alert('Something went wrong');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo, index) => {\n          const { id, completed, title } = todo;\n\n          return (\n            <tr key={id} data-cy=\"todo\">\n\n              <td className=\"is-vcentered\">{index + 1}</td>\n              <td className=\"is-vcentered\">\n                {completed\n              && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => extractUser(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': isClicked && selectedTodoId === id,\n                      'fa-eye': !isClicked || selectedTodoId !== id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n\n    </table>\n  );\n};\n","import {\n  Dispatch,\n  SetStateAction,\n  FC,\n  ChangeEvent,\n} from 'react';\n\ninterface TodoFilterProps {\n  searchInput: string,\n  setSearchInput: Dispatch<SetStateAction<string>>;\n  setFilterMode: Dispatch<SetStateAction<string>>;\n}\n\nexport const TodoFilter: FC<TodoFilterProps>\n  = ({\n    searchInput,\n    setSearchInput,\n    setFilterMode,\n  }) => {\n    const handleSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n      setSearchInput(e.target.value);\n    };\n\n    const clearSearchInput = () => {\n      setSearchInput('');\n    };\n\n    const handleFilterChange = (e: ChangeEvent<HTMLSelectElement>) => {\n      setFilterMode(e.target.value);\n    };\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              onChange={handleFilterChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            value={searchInput}\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            onChange={handleSearchInputChange}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          {!!searchInput.length && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                onClick={clearSearchInput}\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n              />\n            </span>\n          )}\n        </p>\n      </form>\n    );\n  };\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction } from 'react';\nimport { TodoModalType } from '../../types/TodoModal';\nimport { Loader } from '../Loader';\n\ninterface TodoModalProps {\n  todoModal: TodoModalType;\n  setIsClicked: Dispatch<SetStateAction<boolean>>;\n  isLoading: boolean;\n}\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  todoModal,\n  setIsClicked,\n  isLoading,\n}) => {\n  const { todo, user } = todoModal || {};\n  const todoStatus = todo.completed ? 'Done' : 'Planned';\n\n  const handleModalClosure = () => {\n    setIsClicked(false);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={handleModalClosure}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todoStatus}\n\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { getTodos } from './api';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoModalType } from './types/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoModal, setTodoModal] = useState<TodoModalType>({\n    todo: {\n      completed: false,\n      id: 0,\n      title: '',\n      userId: 0,\n    },\n    user: {\n      email: '',\n      id: 0,\n      name: '',\n      phone: '',\n    },\n  });\n  const [isClicked, setIsClicked] = useState(false);\n  const [searchInput, setSearchInput] = useState<string>('');\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [filterMode, setFilterMode] = useState<string>('All');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchTodos = async () => {\n    try {\n      const data = await getTodos();\n\n      setTodos(data);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const filteredTodosArr = useMemo(() => {\n    return todos.filter((todo) => {\n      const isSearched\n      = todo.title.toLowerCase().includes(searchInput.toLowerCase());\n\n      if (filterMode === 'active') {\n        return !todo.completed && isSearched;\n      }\n\n      if (filterMode === 'completed') {\n        return todo.completed && isSearched;\n      }\n\n      return isSearched;\n    });\n  }, [searchInput, todos, filterMode]);\n\n  useEffect(() => {\n    setFilteredTodos(filteredTodosArr);\n  }, [filteredTodosArr]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchInput={searchInput}\n                setSearchInput={setSearchInput}\n                setFilterMode={setFilterMode}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    setTodoModal={setTodoModal}\n                    isClicked={isClicked}\n                    setIsClicked={setIsClicked}\n                    setIsLoading={setIsLoading}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isClicked && (\n        <TodoModal\n          todoModal={todoModal}\n          setIsClicked={setIsClicked}\n          isLoading={isLoading}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}